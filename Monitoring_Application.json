[
  {
    "id": "db17606fa94fbe1f",
    "type": "azureiothubreceiver",
    "z": "71ac08577ce4608a",
    "name": "Azure IoT Hub Receiver",
    "x": 160,
    "y": 580,
    "wires": [["3e4ea1556cd8fec2"]]
  },
  {
    "id": "71372dc78927d844",
    "type": "function",
    "z": "71ac08577ce4608a",
    "name": "Generate ID",
    "func": "msg.payload = {};\n\nvar id = \"\";\nvar counts = [8, 4, 4, 4, 12];\nvar i, j;\n\nfor (i = 0; i < 5; i++) {\n    for (j = 0; j < counts[i]; j++) {\n        id += Math.floor(Math.random() * 16).toString(16);\n    }\n    id +=\"-\";\n}\n\nmsg.payload.id = id;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 720,
    "wires": [["9f72721c1482b884"]]
  },
  {
    "id": "9f72721c1482b884",
    "type": "function",
    "z": "71ac08577ce4608a",
    "name": "Generate Payload",
    "func": "var rm = flow.get('receivedMessage')\n\nmsg.headers['x-ms-documentdb-partitionkey'] = '[\"' + rm.deviceId + '\"]';\n\nmsg.payload.temperature = rm.temperature;\nmsg.payload.humidity = rm.humidity;\n\nmsg.payload[\"_partitionKey\"] = rm.deviceId;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 690,
    "y": 720,
    "wires": [["e4ab8290bca102db"]]
  },
  {
    "id": "e4ab8290bca102db",
    "type": "http request",
    "z": "71ac08577ce4608a",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "credentials": {
      "user": "",
      "password": ""
    },
    "x": 880,
    "y": 720,
    "wires": [["80ed9df8d3e3a30b"]]
  },
  {
    "id": "80ed9df8d3e3a30b",
    "type": "debug",
    "z": "71ac08577ce4608a",
    "name": "Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "complete": "true",
    "statusVal": "",
    "statusType": "auto",
    "x": 1040,
    "y": 720,
    "wires": []
  },
  {
    "id": "3e4ea1556cd8fec2",
    "type": "change",
    "z": "71ac08577ce4608a",
    "name": "Move Received Message",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "receivedMessage",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 660,
    "wires": [["7cf5dede845db7e8"]]
  },
  {
    "id": "08d5aedfd95f12e4",
    "type": "inject",
    "z": "71ac08577ce4608a",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"deviceId\":\"device145\",\"temperature\":23.5,\"humidity\":30}",
    "payloadType": "json",
    "x": 150,
    "y": 740,
    "wires": [["3e4ea1556cd8fec2"]]
  },
  {
    "id": "7f5211b7685148f5",
    "type": "function",
    "z": "71ac08577ce4608a",
    "name": "Create AuthKey",
    "func": "let urlRegExp = /^https?:\\/\\/.*\\.documents\\.azure\\.com(?::\\d+)?(?:\\/([^\\/]+)(?:\\/([^\\/]+)?)?)+$/i;\n\n// Getting necessary values from collection variables.\n// See: https://learning.postman.com/docs/sending-requests/variables/\nlet autorizationType = flow.get(\"authorization_type\");\nlet autorizationVersion = flow.get(\"authorization_version\");\nlet authorizationSignature = flow.get(\n    \"authorization_signature\"\n);\nlet cosmosDBApiVersion = flow.get(\"x-ms-version\");\nlet url = flow.get(\"url\");\n\nvar cryptojs = context.global.cryptojs;\n\n// Decode authorization signature (it is originally base64 coded)\nlet key = cryptojs.enc.Base64.parse(authorizationSignature);\n// Set request date formatting as UTC\nlet dateUtc = new Date().toUTCString();\n// Get request method (a.k.a. verb) to build text for authorization token\nlet verb = flow.get(\"method\");\n\n// Execute regular expression to extract some parts from URL.\nlet parsedUrl = urlRegExp.exec(url);\n// Get resource type from URL\nlet resourceType = parsedUrl[1];\n// Get resource ID from URL, if it is not present, we are getting undefined.\nlet resourceId = parsedUrl[2];\n\n// Build regular expression to get all parameters from URL to build ResourceLink part.\n// See \"Example Encoding\" in: https://docs.microsoft.com/en-us/rest/api/cosmos-db/access-control-on-cosmosdb-resources\nlet resourceLinkPattern =\n    /^https?:\\/\\/.*\\.documents\\.azure\\.com(?::\\d+)?\\/(.*)$/i;\nlet parsedResourceLink = resourceLinkPattern.exec(url);\n// Get resource LInke from expression and in case last character is / we just drop it out.\nlet resourceLink =\n    parsedResourceLink[1].charAt(parsedResourceLink[1].length - 1) === \"/\"\n        ? parsedResourceLink[1].substring(\n            parsedResourceLink[1],\n            parsedResourceLink[1].length - 1\n        )\n        : parsedResourceLink[1];\n// When Resource Id is present in parameters, then Resource Link is whole parameters part,\n// elsewhere, then we need to drop last /resource type to\n// build Resource Link.\n// Example:\n// for URL: https://myaccount.documents.azure.com/dbs/MyCollection/colls/\n// Resource Link will be just: dbs/MyCollection\nif (resourceId === undefined) {\n    // Resource Id not provided\n    // We need to cut last part to left just Resource Id\n    resourceLink = resourceLink.substring(0, resourceLink.lastIndexOf(\"/\"));\n}\n\n// Build string to be encrypted and used as signature.\n// See: https://docs.microsoft.com/en-us/rest/api/cosmos-db/access-control-on-cosmosdb-resources\nvar text =\n    (verb || \"\").toLowerCase() +\n    \"\\n\" +\n    (resourceType || \"\").toLowerCase() +\n    \"\\n\" +\n    (resourceLink || \"\") +\n    \"\\n\" +\n    dateUtc.toLowerCase() +\n    \"\\n\\n\";\n// Build key to authorize request.\nlet signature = cryptojs.HmacSHA256(text, key);\n// Code key as base64 to be sent.\nlet signature_base64 = cryptojs.enc.Base64.stringify(signature);\n// Build autorization token and encode it as URI to be sent.\nvar authorizationToken = encodeURIComponent(\n    \"type=\" +\n    autorizationType +\n    \"&ver=\" +\n    autorizationVersion +\n    \"&sig=\" +\n    signature_base64\n);\n\n// Set request headers\nmsg.headers = {};\n\nmsg.headers['Authorization'] = authorizationToken;\nmsg.headers['x-ms-version'] = cosmosDBApiVersion;\nmsg.headers['x-ms-date'] = dateUtc;\nmsg.headers['Accept'] = \"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 660,
    "wires": [["71372dc78927d844"]]
  },
  {
    "id": "7cf5dede845db7e8",
    "type": "change",
    "z": "71ac08577ce4608a",
    "name": "Set Flow Information",
    "rules": [
      {
        "t": "set",
        "p": "authorization_type",
        "pt": "flow",
        "to": "master",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "authorization_version",
        "pt": "flow",
        "to": "1.0",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "authorization_signature",
        "pt": "flow",
        "to": "",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "x-ms-version",
        "pt": "flow",
        "to": " 2018-12-31",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "method",
        "pt": "flow",
        "to": "POST",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "url",
        "pt": "flow",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 480,
    "y": 660,
    "wires": [["7f5211b7685148f5"]]
  }
]
